Official site: https://www.tutorialsteacher.com/python/private-and-protected-access-modifiers-in-python

Python doesn't have any mechanism that effectively restricts access to any instance variable or method. 
Python has conventions in the names to tell other programmers from where certain variables/methods must/must not be accessed (and it's the programmer job to follow them).

All members in a class are public by default.

 Python's convention to make an instance variable protected is to add a prefix _ (single underscore) to it. This effectively prevents it to be accessed, unless it is from within a sub-class.

 - Example:

	class employee:
    	    def __init__(self, name, sal):
        	self._name=name  # protected attribute 
        	self._salary=sal # protected attribute

 Similarly, a double underscore __ prefixed to a variable makes it private. It gives a strong suggestion not to touch it from outside the class. Any attempt to do so will result in an AttributeError.

 - Example:

	class employee:
    	    def __init__(self, name, sal):
        	self.__name=name  # private attribute 
        	self.__salary=sal # private attribute